import streamlit as st
import pandas as pd
import plotly.express as px
from io import StringIO

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEFAULT_DATA = """equipment_id,temperature,vibration,rpm,wear,status
EQ-001,320,2.1,1450,120,Normal
EQ-002,295,4.5,2100,240,Warning
EQ-003,350,1.8,1800,80,Critical
EQ-004,310,3.2,1950,150,Normal
EQ-005,280,5.1,2250,210,Warning"""

def load_default_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return pd.read_csv(StringIO(DEFAULT_DATA))

def validate_data(data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö"""
    required_columns = {'temperature', 'vibration', 'rpm', 'wear', 'status'}
    if not required_columns.issubset(data.columns):
        missing = required_columns - set(data.columns)
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}")
    return data

def process_uploaded_file(uploaded_file):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        data = pd.read_csv(uploaded_file)
        return validate_data(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def render_metrics(data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü", len(data))
    with col2:
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å",
                len(data[data['status'] == 'Critical']),
                delta_color="inverse")
    with col3:
        avg_wear = data['wear'].mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–π –∏–∑–Ω–æ—Å", f"{avg_wear:.1f} –º–∏–Ω")

def render_3d_plot(data):
    """–°–æ–∑–¥–∞–µ—Ç 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é"""
    fig = px.scatter_3d(
        data,
        x='temperature',
        y='vibration',
        z='rpm',
        color='status',
        size='wear',
        hover_name='equipment_id',
        color_discrete_map={
            'Normal': '#2ecc71',
            'Warning': '#f39c12',
            'Critical': '#e74c3c'
        },
        title="3D –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"
    )
    fig.update_layout(margin=dict(l=0, r=0, b=0, t=30))
    st.plotly_chart(fig, use_container_width=True)

def render_prediction_form():
    """–§–æ—Ä–º–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    with st.expander("üîÆ –†—É—á–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –æ—Ç–∫–∞–∑–∞", expanded=True):
        with st.form("prediction_form"):
            cols = st.columns(2)
            with cols[0]:
                temp = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (K)", 250, 400, 300)
                rpm = st.slider("–û–±–æ—Ä–æ—Ç—ã (RPM)", 0, 5000, 1500)
            with cols[1]:
                vibration = st.slider("–í–∏–±—Ä–∞—Ü–∏—è (mm/s¬≤)", 0.0, 10.0, 2.5)
                wear = st.slider("–ò–∑–Ω–æ—Å (–º–∏–Ω)", 0, 300, 50)

            if st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∏—Å–∫"):
                risk = min(0.95, (temp-250)/200 * (vibration/5) * (rpm/3000) * (wear/200))
                st.progress(risk)
                if risk > 0.7:
                    st.error(f"–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç–∫–∞–∑–∞: {risk:.1%}")
                elif risk > 0.4:
                    st.warning(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: {risk:.1%}")
                else:
                    st.success(f"–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: {risk:.1%}")

def show_analysis_page():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞"""
    st.title("üìä –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: temperature, vibration, rpm, wear, status"
    )

    data = process_uploaded_file(uploaded_file) if uploaded_file else load_default_data()

    if data is not None:
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π | –ò—Å—Ç–æ—á–Ω–∏–∫: {'–≤–∞—à —Ñ–∞–π–ª' if uploaded_file else '–¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ'}")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        render_metrics(data)
        render_3d_plot(data)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        with st.expander("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
            st.dataframe(data)

        render_prediction_form()
    else:
        st.warning("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        data = load_default_data()
        render_3d_plot(data)